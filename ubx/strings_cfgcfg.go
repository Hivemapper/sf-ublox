// Code generated by "stringer -output=strings_cfgcfg.go -trimprefix CfgCfg -type=CfgCfgClearMask,CfgCfgDeviceMask"; DO NOT EDIT.

package ubx

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[CfgCfgIoPort-1]
	_ = x[CfgCfgMsgConf-2]
	_ = x[CfgCfgInfMsg-4]
	_ = x[CfgCfgNavConf-8]
	_ = x[CfgCfgRxmConf-16]
	_ = x[CfgCfgSenConf-256]
	_ = x[CfgCfgRinvConf-512]
	_ = x[CfgCfgAntConf-1024]
	_ = x[CfgCfgLogConf-2048]
	_ = x[CfgCfgFtsConf-4096]
}

const (
	_CfgCfgClearMask_name_0 = "IoPortMsgConf"
	_CfgCfgClearMask_name_1 = "InfMsg"
	_CfgCfgClearMask_name_2 = "NavConf"
	_CfgCfgClearMask_name_3 = "RxmConf"
	_CfgCfgClearMask_name_4 = "SenConf"
	_CfgCfgClearMask_name_5 = "RinvConf"
	_CfgCfgClearMask_name_6 = "AntConf"
	_CfgCfgClearMask_name_7 = "LogConf"
	_CfgCfgClearMask_name_8 = "FtsConf"
)

var (
	_CfgCfgClearMask_index_0 = [...]uint8{0, 6, 13}
)

func (i CfgCfgClearMask) String() string {
	switch {
	case 1 <= i && i <= 2:
		i -= 1
		return _CfgCfgClearMask_name_0[_CfgCfgClearMask_index_0[i]:_CfgCfgClearMask_index_0[i+1]]
	case i == 4:
		return _CfgCfgClearMask_name_1
	case i == 8:
		return _CfgCfgClearMask_name_2
	case i == 16:
		return _CfgCfgClearMask_name_3
	case i == 256:
		return _CfgCfgClearMask_name_4
	case i == 512:
		return _CfgCfgClearMask_name_5
	case i == 1024:
		return _CfgCfgClearMask_name_6
	case i == 2048:
		return _CfgCfgClearMask_name_7
	case i == 4096:
		return _CfgCfgClearMask_name_8
	default:
		return "CfgCfgClearMask(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[CfgCfgDevBBR-1]
	_ = x[CfgCfgDevFlash-2]
	_ = x[CfgCfgDevEEPROM-4]
	_ = x[CfgCfgDevSpiFlash-16]
}

const (
	_CfgCfgDeviceMask_name_0 = "DevBBRDevFlash"
	_CfgCfgDeviceMask_name_1 = "DevEEPROM"
	_CfgCfgDeviceMask_name_2 = "DevSpiFlash"
)

var (
	_CfgCfgDeviceMask_index_0 = [...]uint8{0, 6, 14}
)

func (i CfgCfgDeviceMask) String() string {
	switch {
	case 1 <= i && i <= 2:
		i -= 1
		return _CfgCfgDeviceMask_name_0[_CfgCfgDeviceMask_index_0[i]:_CfgCfgDeviceMask_index_0[i+1]]
	case i == 4:
		return _CfgCfgDeviceMask_name_1
	case i == 16:
		return _CfgCfgDeviceMask_name_2
	default:
		return "CfgCfgDeviceMask(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
