package ubx

{{range $k, $v :=  .}}
// Message {{$k}} {{if gt (len $v) 1 }}({{len $v}} versions){{end}}

{{range $v}}
// {{.TypeName}} ({{.Type}}) {{.Description | notabs}}
// Class/Id {{printf "0x%02x 0x%02x" .Class .Id}} {{.Length}} ({{.MinSize}} + N*{{.VarSize}}) bytes
// {{.Comment | notabs}}
{{- if .IsString}}
type {{.TypeName}} string
{{- else}}
type {{.TypeName}} struct {
{{- range .Blocks}}
	{{- if eq .Cardinality ""}}
		{{block "field" .}}{{.FieldName}} {{.ArraySpec}}
			{{- if .BitfieldRef}}{{.Message.TypeName}}{{.BitfieldRef|title}}
			{{- else if .Bitfield}}{{.Message.TypeName}}{{.Name | title}}
			{{- else}}{{.FieldType}} {{- if .LenFor}} `len:"{{.LenFor|title}}"`{{end}}
			{{- end}} // {{if ne .Unit "-"}}[{{if ne .Scale "-"}}{{.Scale}} {{end}}{{.Unit}}] {{end}}{{.Comment |notabs -}}{{end}}
	{{- else if eq .Cardinality "optional"}}
		// Optional
		{{- range .Nested}}
		{{template "field" .}}
		{{- end}}
	{{- else if eq .Cardinality "repeated"}}
		{{- if .IsString}}
		{{.FieldName}} string
		{{- else}}
		{{.FieldName}} []*struct{
		{{- range .Nested}}
			{{template "field" .}}
		{{- end}}
		} // len: {{.LenField|title}}
		{{- end}}
	{{- end}}
{{- end}}
}
{{- end}}

func ({{.TypeName}}) classID() uint16 { return {{printf "0x%02x%02x" .Id .Class }} }

{{- range .Blocks}}
	{{- if eq .Cardinality ""}}
		{{- block "enums" .}}
			{{- if .Bitfield}}
type {{.Message.TypeName}}{{.Name | title}} {{.FieldType}}
const (
{{- range .Bitfield}}
{{- if .Name}}
	{{.Block.Message.TypeName}}{{.Name | title}} {{.Block.Message.TypeName}}{{.Block.Name | title}}  = {{.Mask}} // {{.Description | notabs}}
{{- end}}
{{- end}}
)
			{{- end}}
		{{- end}}
	{{- else if eq .Cardinality "optional"}}
		{{- range .Nested}}
		{{- template "enums" .}}
		{{- end}}
	{{- else if eq .Cardinality "repeated"}}
		{{- range .Nested}}
		{{- template "enums" .}}
		{{- end}}
	{{- end}}
{{- end}}
{{- end}}
{{- end}}


func mkMsg(classId, Length uint16) Message {

	return nil
}



