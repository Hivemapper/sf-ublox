package ubx

{{range $k, $v :=  .}}
// Message {{$k}} {{if gt (len $v) 1 }}({{len $v}} versions){{end}}

{{range $v}}
// {{.TypeName}} ({{.Type}}) {{.Description | notabs}}
// Class/Id {{printf "0x%02x 0x%02x" .Class .Id}} {{.Length}}({{.MinSize}}) bytes
// {{.Comment | notabs}}
type {{.TypeName}} struct {
{{- range .Blocks}}
	{{- if eq .Cardinality ""}}
		{{block "field" .}}{{.FieldName}} {{.ArraySpec}}{{if .Bitfield}}{{.Message.TypeName}}{{.Name | title}}{{else}}{{.FieldType}}{{end}} // {{if ne .Unit "-"}}[{{if ne .Scale "-"}}{{.Scale}} {{end}}{{.Unit}}] {{end}}{{.Comment |notabs -}}{{end}}
	{{- else if eq .Cardinality "optional"}}
		// Optional
		{{- range .Nested}}
		{{template "field" .}}
		{{- end}}
	{{- else if eq .Cardinality "repeated"}}
		Items []*struct{
		{{- range .Nested}}
			{{template "field" .}}
		{{- end}}
		} // len: {{.CountField}}
	{{- end}}
{{- end}}
}

func ({{.TypeName}}) classID() uint16 { return {{printf "0x%02x%02x" .Id .Class }} }

{{- range .Blocks}}
	{{- if eq .Cardinality ""}}
		{{- block "enums" .}}
			{{- if .Bitfield}}
type {{.Message.TypeName}}{{.Name | title}} {{.FieldType}}
const (
{{- range .Bitfield}}
{{- if .Name}}
	{{.Block.Message.TypeName}}{{.Name | title}} {{.Block.Message.TypeName}}{{.Block.Name | title}}  = {{.Index | mask}} // {{.Description | notabs}}
{{- end}}
{{- end}}
)
			{{- end}}
		{{- end}}
	{{- else if eq .Cardinality "optional"}}
		{{- range .Nested}}
		{{- template "enums" .}}
		{{- end}}
	{{- else if eq .Cardinality "repeated"}}
		{{- range .Nested}}
		{{- template "enums" .}}
		{{- end}}
	{{- end}}
{{- end}}
{{end}}

{{end}}
