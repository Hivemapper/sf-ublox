// Code generated by "stringer -output=strings.go -type=ClassID"; DO NOT EDIT.

package ubx

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ACK_ACK-1281]
	_ = x[ACK_NAK-1280]
	_ = x[AID_ALM-2864]
	_ = x[AID_AOP-2867]
	_ = x[AID_EPH-2865]
	_ = x[AID_HUI-2818]
	_ = x[AID_INI-2817]
	_ = x[CFG_ANT-1555]
	_ = x[CFG_BATCH-1683]
	_ = x[CFG_CFG-1545]
	_ = x[CFG_DAT-1542]
	_ = x[CFG_DGNSS-1648]
	_ = x[CFG_DOSC-1633]
	_ = x[CFG_ESRC-1632]
	_ = x[CFG_GEOFENCE-1641]
	_ = x[CFG_GNSS-1598]
	_ = x[CFG_HNR-1628]
	_ = x[CFG_INF-1538]
	_ = x[CFG_ITFM-1593]
	_ = x[CFG_LOGFILTER-1607]
	_ = x[CFG_MSG-1537]
	_ = x[CFG_NAV5-1572]
	_ = x[CFG_NAVX5-1571]
	_ = x[CFG_NMEA-1559]
	_ = x[CFG_ODO-1566]
	_ = x[CFG_PM2-1595]
	_ = x[CFG_PMS-1670]
	_ = x[CFG_PRT-1536]
	_ = x[CFG_PWR-1623]
	_ = x[CFG_RATE-1544]
	_ = x[CFG_RINV-1588]
	_ = x[CFG_RST-1540]
	_ = x[CFG_RXM-1553]
	_ = x[CFG_SBAS-1558]
	_ = x[CFG_SLAS-1677]
	_ = x[CFG_SMGR-1634]
	_ = x[CFG_TMODE2-1597]
	_ = x[CFG_TMODE3-1649]
	_ = x[CFG_TP5-1585]
	_ = x[CFG_TXSLOT-1619]
	_ = x[CFG_USB-1563]
	_ = x[ESF_INS-4117]
	_ = x[ESF_MEAS-4098]
	_ = x[ESF_RAW-4099]
	_ = x[ESF_STATUS-4112]
	_ = x[HNR_INS-10242]
	_ = x[HNR_PVT-10240]
	_ = x[INF_DEBUG-1028]
	_ = x[INF_ERROR-1024]
	_ = x[INF_NOTICE-1026]
	_ = x[INF_TEST-1027]
	_ = x[INF_WARNING-1025]
	_ = x[LOG_BATCH-8465]
	_ = x[LOG_CREATE-8455]
	_ = x[LOG_ERASE-8451]
	_ = x[LOG_FINDTIME-8462]
	_ = x[LOG_INFO-8456]
	_ = x[LOG_RETRIEVE-8457]
	_ = x[LOG_RETRIEVEBATCH-8464]
	_ = x[LOG_RETRIEVEPOSEXTRA-8463]
	_ = x[LOG_RETRIEVEPOS-8459]
	_ = x[LOG_RETRIEVESTRING-8461]
	_ = x[LOG_STRING-8452]
	_ = x[MGA_ACK_DATA0-4960]
	_ = x[MGA_ANO-4896]
	_ = x[MGA_BDS_ALM-4867]
	_ = x[MGA_BDS_EPH-4867]
	_ = x[MGA_BDS_HEALTH-4867]
	_ = x[MGA_BDS_IONO-4867]
	_ = x[MGA_BDS_UTC-4867]
	_ = x[MGA_DBD-4992]
	_ = x[MGA_FLASH_ACK-4897]
	_ = x[MGA_FLASH_DATA-4897]
	_ = x[MGA_FLASH_STOP-4897]
	_ = x[MGA_GAL_ALM-4866]
	_ = x[MGA_GAL_EPH-4866]
	_ = x[MGA_GAL_TIMEOFFSET-4866]
	_ = x[MGA_GAL_UTC-4866]
	_ = x[MGA_GLO_ALM-4870]
	_ = x[MGA_GLO_EPH-4870]
	_ = x[MGA_GLO_TIMEOFFSET-4870]
	_ = x[MGA_GPS_ALM-4864]
	_ = x[MGA_GPS_EPH-4864]
	_ = x[MGA_GPS_HEALTH-4864]
	_ = x[MGA_GPS_IONO-4864]
	_ = x[MGA_GPS_UTC-4864]
	_ = x[MGA_INI_CLKD-4928]
	_ = x[MGA_INI_EOP-4928]
	_ = x[MGA_INI_FREQ-4928]
	_ = x[MGA_INI_POS_LLH-4928]
	_ = x[MGA_INI_POS_XYZ-4928]
	_ = x[MGA_INI_TIME_GNSS-4928]
	_ = x[MGA_INI_TIME_UTC-4928]
	_ = x[MGA_QZSS_ALM-4869]
	_ = x[MGA_QZSS_EPH-4869]
	_ = x[MGA_QZSS_HEALTH-4869]
	_ = x[MON_BATCH-2610]
	_ = x[MON_GNSS-2600]
	_ = x[MON_HW-2569]
	_ = x[MON_HW2-2571]
	_ = x[MON_IO-2562]
	_ = x[MON_MSGPP-2566]
	_ = x[MON_PATCH-2599]
	_ = x[MON_RXBUF-2567]
	_ = x[MON_RXR-2593]
	_ = x[MON_SMGR-2606]
	_ = x[MON_TXBUF-2568]
	_ = x[MON_VER-2564]
	_ = x[NAV_AOPSTATUS-352]
	_ = x[NAV_ATT-261]
	_ = x[NAV_CLOCK-290]
	_ = x[NAV_DGPS-305]
	_ = x[NAV_DOP-260]
	_ = x[NAV_EOE-353]
	_ = x[NAV_GEOFENCE-313]
	_ = x[NAV_HPPOSECEF-275]
	_ = x[NAV_HPPOSLLH-276]
	_ = x[NAV_NMI-296]
	_ = x[NAV_ODO-265]
	_ = x[NAV_ORB-308]
	_ = x[NAV_POSECEF-257]
	_ = x[NAV_POSLLH-258]
	_ = x[NAV_PVT-263]
	_ = x[NAV_RELPOSNED-316]
	_ = x[NAV_RESETODO-272]
	_ = x[NAV_SAT-309]
	_ = x[NAV_SBAS-306]
	_ = x[NAV_SLAS-322]
	_ = x[NAV_SOL-262]
	_ = x[NAV_STATUS-259]
	_ = x[NAV_SVIN-315]
	_ = x[NAV_SVINFO-304]
	_ = x[NAV_TIMEBDS-292]
	_ = x[NAV_TIMEGAL-293]
	_ = x[NAV_TIMEGLO-291]
	_ = x[NAV_TIMEGPS-288]
	_ = x[NAV_TIMELS-294]
	_ = x[NAV_TIMEUTC-289]
	_ = x[NAV_VELECEF-273]
	_ = x[NAV_VELNED-274]
	_ = x[RXM_IMES-609]
	_ = x[RXM_MEASX-532]
	_ = x[RXM_PMREQ-577]
	_ = x[RXM_RAWX-533]
	_ = x[RXM_RLM-601]
	_ = x[RXM_RTCM-562]
	_ = x[RXM_SFRBX-531]
	_ = x[RXM_SVSI-544]
	_ = x[SEC_UNIQID-9987]
	_ = x[TIM_DOSC-3345]
	_ = x[TIM_FCHG-3350]
	_ = x[TIM_HOC-3351]
	_ = x[TIM_SMEAS-3347]
	_ = x[TIM_SVIN-3332]
	_ = x[TIM_TM2-3331]
	_ = x[TIM_TOS-3346]
	_ = x[TIM_TP-3329]
	_ = x[TIM_VCOCAL-3349]
	_ = x[TIM_VRFY-3334]
	_ = x[UPD_SOS-2324]
}

const _ClassID_name = "NAV_POSECEFNAV_POSLLHNAV_STATUSNAV_DOPNAV_ATTNAV_SOLNAV_PVTNAV_ODONAV_RESETODONAV_VELECEFNAV_VELNEDNAV_HPPOSECEFNAV_HPPOSLLHNAV_TIMEGPSNAV_TIMEUTCNAV_CLOCKNAV_TIMEGLONAV_TIMEBDSNAV_TIMEGALNAV_TIMELSNAV_NMINAV_SVINFONAV_DGPSNAV_SBASNAV_ORBNAV_SATNAV_GEOFENCENAV_SVINNAV_RELPOSNEDNAV_SLASNAV_AOPSTATUSNAV_EOERXM_SFRBXRXM_MEASXRXM_RAWXRXM_SVSIRXM_RTCMRXM_PMREQRXM_RLMRXM_IMESINF_ERRORINF_WARNINGINF_NOTICEINF_TESTINF_DEBUGACK_NAKACK_ACKCFG_PRTCFG_MSGCFG_INFCFG_RSTCFG_DATCFG_RATECFG_CFGCFG_RXMCFG_ANTCFG_SBASCFG_NMEACFG_USBCFG_ODOCFG_NAVX5CFG_NAV5CFG_TP5CFG_RINVCFG_ITFMCFG_PM2CFG_TMODE2CFG_GNSSCFG_LOGFILTERCFG_TXSLOTCFG_PWRCFG_HNRCFG_ESRCCFG_DOSCCFG_SMGRCFG_GEOFENCECFG_DGNSSCFG_TMODE3CFG_PMSCFG_SLASCFG_BATCHUPD_SOSMON_IOMON_VERMON_MSGPPMON_RXBUFMON_TXBUFMON_HWMON_HW2MON_RXRMON_PATCHMON_GNSSMON_SMGRMON_BATCHAID_INIAID_HUIAID_ALMAID_EPHAID_AOPTIM_TPTIM_TM2TIM_SVINTIM_VRFYTIM_DOSCTIM_TOSTIM_SMEASTIM_VCOCALTIM_FCHGTIM_HOCESF_MEASESF_RAWESF_STATUSESF_INSMGA_GPS_ALMMGA_GAL_ALMMGA_BDS_ALMMGA_QZSS_ALMMGA_GLO_ALMMGA_ANOMGA_FLASH_ACKMGA_INI_CLKDMGA_ACK_DATA0MGA_DBDLOG_ERASELOG_STRINGLOG_CREATELOG_INFOLOG_RETRIEVELOG_RETRIEVEPOSLOG_RETRIEVESTRINGLOG_FINDTIMELOG_RETRIEVEPOSEXTRALOG_RETRIEVEBATCHLOG_BATCHSEC_UNIQIDHNR_PVTHNR_INS"

var _ClassID_map = map[ClassID]string{
	257:   _ClassID_name[0:11],
	258:   _ClassID_name[11:21],
	259:   _ClassID_name[21:31],
	260:   _ClassID_name[31:38],
	261:   _ClassID_name[38:45],
	262:   _ClassID_name[45:52],
	263:   _ClassID_name[52:59],
	265:   _ClassID_name[59:66],
	272:   _ClassID_name[66:78],
	273:   _ClassID_name[78:89],
	274:   _ClassID_name[89:99],
	275:   _ClassID_name[99:112],
	276:   _ClassID_name[112:124],
	288:   _ClassID_name[124:135],
	289:   _ClassID_name[135:146],
	290:   _ClassID_name[146:155],
	291:   _ClassID_name[155:166],
	292:   _ClassID_name[166:177],
	293:   _ClassID_name[177:188],
	294:   _ClassID_name[188:198],
	296:   _ClassID_name[198:205],
	304:   _ClassID_name[205:215],
	305:   _ClassID_name[215:223],
	306:   _ClassID_name[223:231],
	308:   _ClassID_name[231:238],
	309:   _ClassID_name[238:245],
	313:   _ClassID_name[245:257],
	315:   _ClassID_name[257:265],
	316:   _ClassID_name[265:278],
	322:   _ClassID_name[278:286],
	352:   _ClassID_name[286:299],
	353:   _ClassID_name[299:306],
	531:   _ClassID_name[306:315],
	532:   _ClassID_name[315:324],
	533:   _ClassID_name[324:332],
	544:   _ClassID_name[332:340],
	562:   _ClassID_name[340:348],
	577:   _ClassID_name[348:357],
	601:   _ClassID_name[357:364],
	609:   _ClassID_name[364:372],
	1024:  _ClassID_name[372:381],
	1025:  _ClassID_name[381:392],
	1026:  _ClassID_name[392:402],
	1027:  _ClassID_name[402:410],
	1028:  _ClassID_name[410:419],
	1280:  _ClassID_name[419:426],
	1281:  _ClassID_name[426:433],
	1536:  _ClassID_name[433:440],
	1537:  _ClassID_name[440:447],
	1538:  _ClassID_name[447:454],
	1540:  _ClassID_name[454:461],
	1542:  _ClassID_name[461:468],
	1544:  _ClassID_name[468:476],
	1545:  _ClassID_name[476:483],
	1553:  _ClassID_name[483:490],
	1555:  _ClassID_name[490:497],
	1558:  _ClassID_name[497:505],
	1559:  _ClassID_name[505:513],
	1563:  _ClassID_name[513:520],
	1566:  _ClassID_name[520:527],
	1571:  _ClassID_name[527:536],
	1572:  _ClassID_name[536:544],
	1585:  _ClassID_name[544:551],
	1588:  _ClassID_name[551:559],
	1593:  _ClassID_name[559:567],
	1595:  _ClassID_name[567:574],
	1597:  _ClassID_name[574:584],
	1598:  _ClassID_name[584:592],
	1607:  _ClassID_name[592:605],
	1619:  _ClassID_name[605:615],
	1623:  _ClassID_name[615:622],
	1628:  _ClassID_name[622:629],
	1632:  _ClassID_name[629:637],
	1633:  _ClassID_name[637:645],
	1634:  _ClassID_name[645:653],
	1641:  _ClassID_name[653:665],
	1648:  _ClassID_name[665:674],
	1649:  _ClassID_name[674:684],
	1670:  _ClassID_name[684:691],
	1677:  _ClassID_name[691:699],
	1683:  _ClassID_name[699:708],
	2324:  _ClassID_name[708:715],
	2562:  _ClassID_name[715:721],
	2564:  _ClassID_name[721:728],
	2566:  _ClassID_name[728:737],
	2567:  _ClassID_name[737:746],
	2568:  _ClassID_name[746:755],
	2569:  _ClassID_name[755:761],
	2571:  _ClassID_name[761:768],
	2593:  _ClassID_name[768:775],
	2599:  _ClassID_name[775:784],
	2600:  _ClassID_name[784:792],
	2606:  _ClassID_name[792:800],
	2610:  _ClassID_name[800:809],
	2817:  _ClassID_name[809:816],
	2818:  _ClassID_name[816:823],
	2864:  _ClassID_name[823:830],
	2865:  _ClassID_name[830:837],
	2867:  _ClassID_name[837:844],
	3329:  _ClassID_name[844:850],
	3331:  _ClassID_name[850:857],
	3332:  _ClassID_name[857:865],
	3334:  _ClassID_name[865:873],
	3345:  _ClassID_name[873:881],
	3346:  _ClassID_name[881:888],
	3347:  _ClassID_name[888:897],
	3349:  _ClassID_name[897:907],
	3350:  _ClassID_name[907:915],
	3351:  _ClassID_name[915:922],
	4098:  _ClassID_name[922:930],
	4099:  _ClassID_name[930:937],
	4112:  _ClassID_name[937:947],
	4117:  _ClassID_name[947:954],
	4864:  _ClassID_name[954:965],
	4866:  _ClassID_name[965:976],
	4867:  _ClassID_name[976:987],
	4869:  _ClassID_name[987:999],
	4870:  _ClassID_name[999:1010],
	4896:  _ClassID_name[1010:1017],
	4897:  _ClassID_name[1017:1030],
	4928:  _ClassID_name[1030:1042],
	4960:  _ClassID_name[1042:1055],
	4992:  _ClassID_name[1055:1062],
	8451:  _ClassID_name[1062:1071],
	8452:  _ClassID_name[1071:1081],
	8455:  _ClassID_name[1081:1091],
	8456:  _ClassID_name[1091:1099],
	8457:  _ClassID_name[1099:1111],
	8459:  _ClassID_name[1111:1126],
	8461:  _ClassID_name[1126:1144],
	8462:  _ClassID_name[1144:1156],
	8463:  _ClassID_name[1156:1176],
	8464:  _ClassID_name[1176:1193],
	8465:  _ClassID_name[1193:1202],
	9987:  _ClassID_name[1202:1212],
	10240: _ClassID_name[1212:1219],
	10242: _ClassID_name[1219:1226],
}

func (i ClassID) String() string {
	if str, ok := _ClassID_map[i]; ok {
		return str
	}
	return "ClassID(" + strconv.FormatInt(int64(i), 10) + ")"
}
